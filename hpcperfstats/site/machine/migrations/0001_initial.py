import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import hpcperfstats.site.machine.models


# generated by manage.py makemigrations

class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='host_data',
            fields=[
                ('time', models.DateTimeField(primary_key=True, serialize=False)),
                ('host', models.CharField(blank=True, max_length=64, null=True)),
                ('jid', models.CharField(blank=True, max_length=32, null=True)),
                ('type', models.CharField(blank=True, max_length=32, null=True)),
                ('dev', models.CharField(blank=True, max_length=64, null=True)),
                ('event', models.CharField(blank=True, max_length=64, null=True)),
                ('unit', models.CharField(blank=True, max_length=16, null=True)),
                ('value', hpcperfstats.site.machine.models.RealField(null=True)),
                ('arc', hpcperfstats.site.machine.models.RealField(null=True)),
                ('delta', hpcperfstats.site.machine.models.RealField(null=True)),
            ],
            options={
                'db_table': 'host_data',
            },
        ),
        migrations.CreateModel(
            name='job_data',
            fields=[
                ('jid', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('submit_time', models.DateTimeField()),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('runtime', models.FloatField(blank=True, null=True)),
                ('timelimit', models.FloatField(blank=True, null=True)),
                ('node_hrs', models.FloatField(blank=True, null=True)),
                ('nhosts', models.IntegerField(blank=True, null=True)),
                ('ncores', models.IntegerField(blank=True, null=True)),
                ('username', models.CharField(max_length=64)),
                ('account', models.CharField(blank=True, max_length=64, null=True)),
                ('queue', models.CharField(blank=True, max_length=64, null=True)),
                ('state', models.CharField(blank=True, max_length=64, null=True)),
                ('QOS', models.CharField(blank=True, max_length=64, null=True)),
                ('jobname', models.TextField(blank=True, null=True)),
                ('host_list', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=None)),
            ],
            options={
                'db_table': 'job_data',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='proc_data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('host', models.CharField(blank=True, max_length=64, null=True)),
                ('proc', models.CharField(blank=True, max_length=512, null=True)),
                ('jid', models.ForeignKey(blank=True, db_column='jid', null=True, on_delete=django.db.models.deletion.CASCADE, to='machine.job_data')),
            ],
            options={
                'db_table': 'proc_data',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='metrics_data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=32, null=True)),
                ('metric', models.CharField(blank=True, max_length=32, null=True)),
                ('units', models.CharField(blank=True, max_length=16, null=True)),
                ('value', models.FloatField(blank=True, null=True)),
                ('jid', models.ForeignKey(blank=True, db_column='jid', null=True, on_delete=django.db.models.deletion.CASCADE, to='machine.job_data')),
            ],
            options={
                'db_table': 'metrics_data',
                'managed': True,
            },
        ),
        migrations.AddIndex(
            model_name='host_data',
            index=models.Index(fields=['host', 'time'], name='host_data_host_eda1c8_idx'),
        ),
        migrations.AddIndex(
            model_name='host_data',
            index=models.Index(fields=['jid', 'time'], name='host_data_jid_9e84c4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='host_data',
            unique_together={('time', 'host', 'type', 'event')},
        ),
        migrations.AddIndex(
            model_name='proc_data',
            index=models.Index(fields=['jid'], name='proc_data_jid_a6e794_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='proc_data',
            unique_together={('jid', 'host', 'proc')},
        ),
        migrations.AlterUniqueTogether(
            name='metrics_data',
            unique_together={('jid', 'type', 'metric')},
        ),

        # TIMESCALEDB Timeseries and compression setup

        migrations.RunSQL(
            "ALTER TABLE host_data DROP CONSTRAINT host_data_pkey;"
        ),

        migrations.RunSQL(
            "SELECT create_hypertable('host_data', 'time', chunk_time_interval => INTERVAL '1 days');"
        ),

        migrations.RunSQL(
            "ALTER TABLE host_data SET (timescaledb.compress, timescaledb.compress_orderby = 'time', timescaledb.compress_segmentby = 'host,jid,type,event');"

        ),
        migrations.RunSQL(
            "SELECT add_compression_policy('host_data', compress_after => INTERVAL '60d');"
        ),

    ]
