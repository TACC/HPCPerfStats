#!/usr/bin/env python
import sys
sys.path.append('@CONFIG_PY_DIR@')
import datetime, glob, job_stats, os, batch_acct, subprocess, time
import cPickle as pickle

execfile('pickles.conf')

prog_name = os.path.basename(sys.argv[0])
pickle_prot = pickle.HIGHEST_PROTOCOL

def FATAL(str):
    print >>sys.stderr, "%s: %s" % (prog_name, str)
    sys.exit(1)

def USAGE(str):
    print >>sys.stderr, "Usage: %s %s" % (prog_name, str)
    sys.exit(1)

def getdate(date_str):
    try:        
        out = subprocess.check_output(['date', '--date', date_str, '+%s'])
        return long(out)
    except subprocess.CalledProcessError, e:
        FATAL("Invalid date: `%s'" % (date_str,))

def short_host_name(str):
    return str.split('.')[0]

if len(sys.argv) != 4:
    USAGE("DIR START_DATE END_DATE");

pickle_dir = sys.argv[1]
start = getdate(sys.argv[2])
end = getdate(sys.argv[3])

#if not 'seek' in locals():
#  seek = 800 << 20 # XXX

# Run though all jobs that ended after start and before end + 3 days.
a=batch_acct.factory(batch_system, acct_path, host_name_ext)

for acct in a.reader(start_time=start,end_time=end,seek=seek):
    if acct['end_time'] == 0:
        continue
    if os.path.exists(os.path.join(pickle_dir, acct['id'])): 
        print acct['id'] + " exists, don't reprocess"
        continue

    job = job_stats.from_acct(acct, tacc_stats_home, host_list_dir, a)
    pickle_path = os.path.join(pickle_dir, job.id)
    pickle_file = open(pickle_path, 'w')
    pickle.dump(job, pickle_file, pickle_prot)

